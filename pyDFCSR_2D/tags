!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Beam	CSR.py	/^from .beams import Beam$/;"	i
Beam	beams.py	/^class Beam():$/;"	c
CSR	pyDFCSR_mpi_run.py	/^    CSR = CSR2D(input_file= infile, parallel= True)$/;"	v
CSR2D	CSR.py	/^class CSR2D:$/;"	c
CSR2D	__init__.py	/^from .CSR import CSR2D$/;"	i
CSR2D	example/test.py	/^from pyDFCSR_2D import CSR2D$/;"	i
CSR2D	pyDFCSR_mpi_run.py	/^from pyDFCSR_2D import CSR2D$/;"	i
CSR_params	CSR.py	/^from .params import Integration_params, CSR_params$/;"	i
CSR_params	params.py	/^class CSR_params:$/;"	c
CSR_steps_index	lattice.py	/^    def CSR_steps_index(self):$/;"	m	class:Lattice
C_LIGHT	interfaces.py	/^from bmadx.constants import C_LIGHT, M_ELECTRON, E_CHARGE$/;"	i
DFCSR_postprocessor	postprocessor.py	/^class DFCSR_postprocessor():$/;"	c
DF_interp	deposit.py	/^    def DF_interp(self, DF, x_grid_interp = None, z_grid_interp = None, x_grids = None, z_grids = None, fill_value = 0.0):$/;"	m	class:DF_tracker
DF_tracker	CSR.py	/^from .deposit import DF_tracker$/;"	i
DF_tracker	deposit.py	/^class DF_tracker:$/;"	c
Drift	CSR.py	/^from bmadx import  Drift, SBend, Quadrupole, Sextupole$/;"	i
DtestCSR	example/test.py	/^DtestCSR = CSR2D(input_file='input\/dipole_config_chirp.yaml')$/;"	v
E_CHARGE	interfaces.py	/^from bmadx.constants import C_LIGHT, M_ELECTRON, E_CHARGE$/;"	i
Generator	beams.py	/^from distgen import Generator$/;"	i
Integration_params	CSR.py	/^from .params import Integration_params, CSR_params$/;"	i
Integration_params	params.py	/^class Integration_params:$/;"	c
Lattice	CSR.py	/^from .lattice import Lattice  # , get_referece_traj$/;"	i
Lattice	lattice.py	/^class Lattice():$/;"	c
LinearInterpolator	interp1D.py	/^class LinearInterpolator:$/;"	c
MC2	beams.py	/^from .physical_constants import MC2$/;"	i
MC2	physical_constants.py	/^MC2 = scipy.constants.value('electron mass energy equivalent in MeV')*1e6   # Electron rest mass in eV$/;"	v
MPI	CSR.py	/^from mpi4py import MPI$/;"	i
MPI	pyDFCSR_mpi_run.py	/^from mpi4py import MPI$/;"	i
MPI	test/test_mpi.py	/^from mpi4py import MPI$/;"	i
M_ELECTRON	beams.py	/^from bmadx import Particle, M_ELECTRON$/;"	i
M_ELECTRON	interfaces.py	/^from bmadx.constants import C_LIGHT, M_ELECTRON, E_CHARGE$/;"	i
Nelement	lattice.py	/^    def Nelement(self):$/;"	m	class:Lattice
OrderedDict	yaml_parser.py	/^from collections import OrderedDict$/;"	i
OrderedDumper	yaml_parser.py	/^    class OrderedDumper(Dumper):$/;"	c	function:ordered_dump
OrderedLoader	yaml_parser.py	/^    class OrderedLoader(Loader):$/;"	c	function:ordered_load
Particle	beams.py	/^from bmadx import Particle, M_ELECTRON$/;"	i
Particle	interfaces.py	/^from bmadx.structures import Particle$/;"	i
ParticleGroup	beams.py	/^from pmd_beamphysics import ParticleGroup$/;"	i
ParticleGroup	interfaces.py	/^from pmd_beamphysics import ParticleGroup$/;"	i
ParticleGroup	postprocessor.py	/^from pmd_beamphysics import ParticleGroup$/;"	i
Quadrupole	CSR.py	/^from bmadx import  Drift, SBend, Quadrupole, Sextupole$/;"	i
RegularGridInterpolator	beams.py	/^from scipy.interpolate import RegularGridInterpolator$/;"	i
RegularGridInterpolator	deposit.py	/^from scipy.interpolate import RegularGridInterpolator$/;"	i
SBend	CSR.py	/^from bmadx import  Drift, SBend, Quadrupole, Sextupole$/;"	i
Sextupole	CSR.py	/^from bmadx import  Drift, SBend, Quadrupole, Sextupole$/;"	i
TYPE_CHECKING	_version.py	/^TYPE_CHECKING = False$/;"	v
TrilinearInterpolator	interp3D.py	/^class TrilinearInterpolator:$/;"	c
TrilinearInterpolator	test/test_interpolation.py	/^from pyDFCSR_2D.interp3D import  TrilinearInterpolator, interpolate3D$/;"	i
TrilinearInterpolator_vec	interp3D.py	/^class TrilinearInterpolator_vec:$/;"	c
Tuple	_version.py	/^    from typing import Tuple, Union$/;"	i
Union	_version.py	/^    from typing import Tuple, Union$/;"	i
VERSION_TUPLE	_version.py	/^    VERSION_TUPLE = Tuple[Union[int, str], ...]$/;"	v
VERSION_TUPLE	_version.py	/^    VERSION_TUPLE = object$/;"	v
__all__	__init__.py	/^__all__ = ["CSR2D"]$/;"	v
__init__	CSR.py	/^    def __init__(self, input_file, parallel = False):$/;"	m	class:CSR2D
__init__	beams.py	/^    def __init__(self, input_beam):$/;"	m	class:Beam
__init__	deposit.py	/^    def __init__(self, input_dic={}):$/;"	m	class:DF_tracker
__init__	interp1D.py	/^    def __init__(self, data, x):$/;"	m	class:LinearInterpolator
__init__	interp3D.py	/^    def __init__(self, data, x, y, z):$/;"	m	class:TrilinearInterpolator
__init__	interp3D.py	/^    def __init__(self, data, x, y, z):$/;"	m	class:TrilinearInterpolator_vec
__init__	lattice.py	/^    def __init__(self, input_lattice):$/;"	m	class:Lattice
__init__	params.py	/^    def __init__(self, input_dic = {}):$/;"	m	class:CSR_params
__init__	params.py	/^    def __init__(self, input_dic = {}):$/;"	m	class:Integration_params
__init__	postprocessor.py	/^    def __init__(self, run_name, work_dir='.\/output\/'):$/;"	m	class:DFCSR_postprocessor
__version__	__init__.py	/^    __version__ = "0.0.0"$/;"	v
__version__	__init__.py	/^    from ._version import __version__$/;"	i
_dict_representer	yaml_parser.py	/^    def _dict_representer(dumper, data):$/;"	f	function:ordered_dump
append_DF	deposit.py	/^    def append_DF(self):$/;"	m	class:DF_tracker
append_interpolant	deposit.py	/^    def append_interpolant(self, formation_length, n_formation_length):$/;"	m	class:DF_tracker
apply_wakes	beams.py	/^    def apply_wakes(self, dE_dct, x_kick, xrange, zrange, step_size, transverse_on):$/;"	m	class:Beam
argparse	pyDFCSR_mpi_run.py	/^import argparse$/;"	i
args	pyDFCSR_mpi_run.py	/^    args = parser.parse_args()$/;"	v
bmadx_particles_to_openpmd	beams.py	/^from .interfaces import  openpmd_to_bmadx_particles, bmadx_particles_to_openpmd$/;"	i
bmadx_particles_to_openpmd	interfaces.py	/^def bmadx_particles_to_openpmd(particle: Particle, charge):$/;"	f
build_interpolant	deposit.py	/^    def build_interpolant(self):$/;"	m	class:DF_tracker
build_interpolant	lattice.py	/^    def build_interpolant(self):$/;"	m	class:Lattice
c	physical_constants.py	/^c = scipy.constants.c                                    # Speed of light$/;"	v
calculate_2D_CSR	CSR.py	/^    def calculate_2D_CSR(self):$/;"	m	class:CSR2D
calculate_2D_CSR_parallel	CSR.py	/^    def calculate_2D_CSR_parallel(self):$/;"	m	class:CSR2D
charge	beams.py	/^    def charge(self):$/;"	m	class:Beam
check_input	lattice.py	/^    def check_input(self, input):$/;"	m	class:Lattice
check_input_consistency	CSR.py	/^    def check_input_consistency(self, input):$/;"	m	class:CSR2D
check_inputs	beams.py	/^    def check_inputs(self, input_beam):$/;"	m	class:Beam
cm	postprocessor.py	/^from matplotlib import cm$/;"	i
cm	tools.py	/^from matplotlib import cm$/;"	i
comm	pyDFCSR_mpi_run.py	/^comm = MPI.COMM_WORLD$/;"	v
comm	test/test_mpi.py	/^comm = MPI.COMM_WORLD$/;"	v
configure_params	deposit.py	/^    def configure_params(self, xbins=100, zbins=100, xlim=5, zlim=5,$/;"	m	class:DF_tracker
configure_params	params.py	/^    def configure_params(self, n_formation_length = 4, zbins = 200, xbins = 200):$/;"	m	class:Integration_params
configure_params	params.py	/^    def configure_params(self, workdir = '.', apply_CSR = 1, compute_CSR = 1,$/;"	m	class:CSR_params
constants	physical_constants.py	/^import scipy.constants$/;"	i
construct_mapping	yaml_parser.py	/^    def construct_mapping(loader, node):$/;"	f	function:ordered_load
count	test/test_mpi.py	/^count = [ave + 1 if p < res else ave for p in range(mpi_size)]$/;"	v
data	test/test_interpolation.py	/^data = f(xg, yg, zg)$/;"	v
datetime	tools.py	/^import datetime$/;"	i
deque	deposit.py	/^from collections import deque$/;"	i
dict2hdf5	CSR.py	/^from .tools import dict2hdf5$/;"	i
dict2hdf5	tools.py	/^def dict2hdf5(hf, dic, group=None):$/;"	f
displ	test/test_mpi.py	/^displ = [sum(count[:p]) for p in range(mpi_size)]$/;"	v
displ	test/test_mpi.py	/^displ = np.array(displ)$/;"	v
double	interp1D.py	/^from numba import double$/;"	i
double	interp3D.py	/^from numba import double$/;"	i
dump_beam	CSR.py	/^    def dump_beam(self, label):$/;"	m	class:CSR2D
e	physical_constants.py	/^e = scipy.constants.e                                # Fundamental Charge Unit$/;"	v
energy	beams.py	/^    def energy(self):$/;"	m	class:Beam
f	test/test_interpolation.py	/^def f(x, y, z):$/;"	f
find_nearest_ind	postprocessor.py	/^from .tools import full_path, find_nearest_ind, plot_2D_contour$/;"	i
find_nearest_ind	tools.py	/^def find_nearest_ind(array, value):$/;"	f
frog_leap	beams.py	/^    def frog_leap(self):$/;"	m	class:Beam
full_path	CSR.py	/^from .tools import full_path, isotime$/;"	i
full_path	params.py	/^from .tools import full_path$/;"	i
full_path	postprocessor.py	/^from .tools import full_path, find_nearest_ind, plot_2D_contour$/;"	i
full_path	tools.py	/^def full_path(path):$/;"	f
full_path	yaml_parser.py	/^from .tools import full_path$/;"	i
gamma	beams.py	/^    def gamma(self):$/;"	m	class:Beam
get_CSR_integrand	CSR.py	/^    def get_CSR_integrand(self,s ,x, t, sp, xp, ignore_vx = False):$/;"	m	class:CSR2D
get_CSR_mesh	CSR.py	/^    def get_CSR_mesh(self):$/;"	m	class:CSR2D
get_CSR_wake	CSR.py	/^    def get_CSR_wake(self, s, x, debug = False):$/;"	m	class:CSR2D
get_DF	deposit.py	/^    def get_DF(self, x, z, px, t):$/;"	m	class:DF_tracker
get_bmadx_element	CSR.py	/^    def get_bmadx_element(self, ele, type, DL, entrance = False, exit = False):$/;"	m	class:CSR2D
get_formation_length	CSR.py	/^    def get_formation_length(self, R, sigma_z, phi = 0.0, inbend=True):$/;"	m	class:CSR2D
get_particles	postprocessor.py	/^    def get_particles(self, step = None):$/;"	m	class:DFCSR_postprocessor
get_ref_traj	lattice.py	/^    def get_ref_traj(self, Nsample = 2000):$/;"	m	class:Lattice
get_referece_traj	CSR.py	/^from .lattice import Lattice  # , get_referece_traj$/;"	i
get_referece_traj	lattice.py	/^def get_referece_traj(lattice_config, Nsample = 5000, Ndim = 2):$/;"	f
get_statistics	postprocessor.py	/^    def get_statistics(self, key, show_plot = True):$/;"	m	class:DFCSR_postprocessor
get_steps	lattice.py	/^    def get_steps(self):$/;"	m	class:Lattice
get_wakes	postprocessor.py	/^    def get_wakes(self, s, show_plot = True):$/;"	m	class:DFCSR_postprocessor
h5py	CSR.py	/^import h5py$/;"	i
h5py	postprocessor.py	/^import h5py$/;"	i
histogram_cic_1d	deposit.py	/^def histogram_cic_1d(q1, w, nbins, bins_start, bins_end):$/;"	f
histogram_cic_2d	deposit.py	/^def histogram_cic_2d(q1, q2, w,$/;"	f
infile	pyDFCSR_mpi_run.py	/^    infile = args.input_file$/;"	v
init_MPI	CSR.py	/^    def init_MPI(self):$/;"	m	class:CSR2D
init_energy	beams.py	/^    def init_energy(self):$/;"	m	class:Beam
init_gamma	beams.py	/^    def init_gamma(self):$/;"	m	class:Beam
init_statistics	CSR.py	/^    def init_statistics(self):$/;"	m	class:CSR2D
initialization	CSR.py	/^    def initialization(self):$/;"	m	class:CSR2D
interp	interp1D.py	/^    def interp(self, xval):$/;"	m	class:LinearInterpolator
interp	interp3D.py	/^    def interp(self, xval, yval, zval):$/;"	m	class:TrilinearInterpolator
interp	interp3D.py	/^    def interp(self, xval, yval, zval):$/;"	m	class:TrilinearInterpolator_vec
interpolate1D	CSR.py	/^from .interp1D import interpolate1D$/;"	i
interpolate1D	interp1D.py	/^def interpolate1D(xval, data, min_x, delta_x):$/;"	f
interpolate3D	CSR.py	/^from .interp3D import interpolate3D$/;"	i
interpolate3D	interp3D.py	/^def interpolate3D(xval, yval, zval, data, min_x, min_y, min_z,  delta_x, delta_y, delta_z):$/;"	f
interpolate3D	test/test_interpolation.py	/^from pyDFCSR_2D.interp3D import  TrilinearInterpolator, interpolate3D$/;"	i
interpolate_3d_vectorized	interp3D.py	/^def interpolate_3d_vectorized(data, x, y, z, min_x, min_y, min_z,  delta_x, delta_y, delta_z):$/;"	f
isotime	CSR.py	/^from .tools import full_path, isotime$/;"	i
isotime	tools.py	/^def isotime():$/;"	f
jit	deposit.py	/^from numba import jit$/;"	i
jit	interp1D.py	/^from numba import jit$/;"	i
jit	interp3D.py	/^from numba import jit$/;"	i
jitclass	interp1D.py	/^from numba.experimental import jitclass$/;"	i
jitclass	interp3D.py	/^from numba.experimental import jitclass$/;"	i
lattice_length	lattice.py	/^    def lattice_length(self):$/;"	m	class:Lattice
local_size	test/test_mpi.py	/^local_size = count[rank]$/;"	v
m	test/test_interpolation.py	/^m = 40000$/;"	v
math	deposit.py	/^import math$/;"	i
matplotlib	postprocessor.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	tools.py	/^import matplotlib.pyplot as plt$/;"	i
me	physical_constants.py	/^me = scipy.constants.m_e                                                     # Mass of electron$/;"	v
mean_energy	beams.py	/^    def mean_energy(self):$/;"	m	class:Beam
mean_x	beams.py	/^    def mean_x(self):$/;"	m	class:Beam
mean_y	beams.py	/^    def mean_y(self):$/;"	m	class:Beam
mean_z	beams.py	/^    def mean_z(self):$/;"	m	class:Beam
mpi_rank	pyDFCSR_mpi_run.py	/^mpi_rank = comm.Get_rank()$/;"	v
mpi_size	pyDFCSR_mpi_run.py	/^mpi_size = comm.Get_size()$/;"	v
mpi_size	test/test_mpi.py	/^mpi_size = comm.Get_size()$/;"	v
n	test/test_interpolation.py	/^n = 1500$/;"	v
np	CSR.py	/^import numpy as np$/;"	i
np	SGolay_filter.py	/^import numpy as np$/;"	i
np	beams.py	/^import numpy as np$/;"	i
np	deposit.py	/^import numpy as np$/;"	i
np	interfaces.py	/^import numpy as np$/;"	i
np	interp1D.py	/^import numpy as np$/;"	i
np	interp3D.py	/^import numpy as np$/;"	i
np	lattice.py	/^import numpy as np$/;"	i
np	postprocessor.py	/^import numpy as np$/;"	i
np	r_gen6.py	/^import numpy as np$/;"	i
np	test/test_interpolation.py	/^import numpy as np$/;"	i
np	test/test_mpi.py	/^import numpy as np$/;"	i
np	tools.py	/^import numpy as np$/;"	i
np	twiss.py	/^import numpy as np$/;"	i
np	twiss_R.py	/^import numpy as np$/;"	i
openpmd_to_bmadx_coords	interfaces.py	/^def openpmd_to_bmadx_coords($/;"	f
openpmd_to_bmadx_particles	beams.py	/^from .interfaces import  openpmd_to_bmadx_particles, bmadx_particles_to_openpmd$/;"	i
openpmd_to_bmadx_particles	interfaces.py	/^def openpmd_to_bmadx_particles($/;"	f
ordered_dump	yaml_parser.py	/^def ordered_dump(data, stream=None, Dumper=yaml.SafeDumper, **kwds):$/;"	f
ordered_load	yaml_parser.py	/^def ordered_load(stream, Loader=yaml.SafeLoader, object_pairs_hook=OrderedDict):$/;"	f
os	CSR.py	/^import os$/;"	i
os	postprocessor.py	/^import os$/;"	i
os	pyDFCSR_mpi_run.py	/^import os$/;"	i
os	tools.py	/^import os$/;"	i
os	yaml_parser.py	/^import os$/;"	i
parse_all_wakes	postprocessor.py	/^    def parse_all_wakes(self):$/;"	m	class:DFCSR_postprocessor
parse_input	CSR.py	/^    def parse_input(self, input_file):$/;"	m	class:CSR2D
parse_yaml	CSR.py	/^from .yaml_parser import parse_yaml$/;"	i
parse_yaml	lattice.py	/^from .yaml_parser import parse_yaml$/;"	i
parse_yaml	yaml_parser.py	/^def parse_yaml(input):$/;"	f
parser	pyDFCSR_mpi_run.py	/^    parser = argparse.ArgumentParser(description="Configure pyDFCSR")$/;"	v
particle_group	beams.py	/^    def particle_group(self):$/;"	m	class:Beam
plot_2D_contour	postprocessor.py	/^from .tools import full_path, find_nearest_ind, plot_2D_contour$/;"	i
plot_2D_contour	tools.py	/^def plot_2D_contour(x, y, z, title = None):$/;"	f
plot_surface	tools.py	/^def plot_surface(x, y, z, title = 'None'):$/;"	f
plot_wakes_contour	postprocessor.py	/^    def plot_wakes_contour(self, s):$/;"	m	class:DFCSR_postprocessor
plt	postprocessor.py	/^import matplotlib.pyplot as plt$/;"	i
plt	tools.py	/^import matplotlib.pyplot as plt$/;"	i
pop_left_DF	deposit.py	/^    def pop_left_DF(self, new_start_time):$/;"	m	class:DF_tracker
pop_right_DF	deposit.py	/^    def pop_right_DF(self):$/;"	m	class:DF_tracker
prange	interp1D.py	/^from numba import prange$/;"	i
px	beams.py	/^    def px(self):$/;"	m	class:Beam
pyDFCSR_2D	test/test_import.py	/^    import pyDFCSR_2D$/;"	i
pz	beams.py	/^    def pz(self):$/;"	m	class:Beam
qe	physical_constants.py	/^qe = -e                                                                                          # Charge on electron$/;"	v
r_gen6	CSR.py	/^from .r_gen6 import r_gen6$/;"	i
r_gen6	r_gen6.py	/^def r_gen6(L, angle = 0, k1=0, roll=0, E1=0, E2=0, hgap=0):$/;"	f
rank	test/test_mpi.py	/^rank = comm.Get_rank()$/;"	v
result2	test/test_interpolation.py	/^    result2 = t2.interp(xval, yval, zval)$/;"	v
run	CSR.py	/^    def run(self, stop_time = None, debug = False):$/;"	m	class:CSR2D
savgol_filter	deposit.py	/^from scipy.signal import savgol_filter$/;"	i
scipy	SGolay_filter.py	/^import scipy$/;"	i
scipy	physical_constants.py	/^import scipy.constants$/;"	i
sgolay2d	SGolay_filter.py	/^def sgolay2d ( z, window_size, order, derivative=None):$/;"	f
sigma_energy	beams.py	/^    def sigma_energy(self):$/;"	m	class:Beam
sigma_x	beams.py	/^    def sigma_x(self):$/;"	m	class:Beam
sigma_x_transform	beams.py	/^    def sigma_x_transform(self):$/;"	m	class:Beam
sigma_z	beams.py	/^    def sigma_z(self):$/;"	m	class:Beam
slope	beams.py	/^    def slope(self):$/;"	m	class:Beam
spec	interp1D.py	/^spec = [$/;"	v
spec	interp3D.py	/^spec = [$/;"	v
start	test/test_mpi.py	/^start = displ[rank]$/;"	v
steps_record	lattice.py	/^    def steps_record(self):$/;"	m	class:Lattice
summe	test/test_mpi.py	/^summe = np.empty(1,dtype=np.float64)$/;"	v
sys	interfaces.py	/^import sys$/;"	i
sys	yaml_parser.py	/^import sys$/;"	i
t0	test/test_interpolation.py	/^t0 = time.time()$/;"	v
t2	test/test_interpolation.py	/^t2 = TrilinearInterpolator(data, x, y, z)$/;"	v
test_importable	test/test_import.py	/^def test_importable():$/;"	f
time	CSR.py	/^import time$/;"	i
time	test/test_interpolation.py	/^import time$/;"	i
torch	interfaces.py	/^import torch$/;"	i
total_steps	lattice.py	/^    def total_steps(self):$/;"	m	class:Lattice
track	beams.py	/^    def track(self, element, step_size, update_step=True):$/;"	m	class:Beam
track_element	beams.py	/^from bmadx import track_element$/;"	i
twiss	beams.py	/^    def twiss(self):$/;"	m	class:Beam
twiss_R	CSR.py	/^from .twiss_R import twiss_R$/;"	i
twiss_R	twiss_R.py	/^def twiss_R(R, beta0, alpha0):$/;"	f
twiss_dispersion_calc	twiss.py	/^def twiss_dispersion_calc(sigma3):$/;"	f
twiss_from_bmadx_particles	beams.py	/^from .twiss import  twiss_from_bmadx_particles$/;"	i
twiss_from_bmadx_particles	twiss.py	/^def twiss_from_bmadx_particles(p):$/;"	f
update	lattice.py	/^    def update(self, ele_name):$/;"	m	class:Lattice
update_statistics	CSR.py	/^    def update_statistics(self, step):$/;"	m	class:CSR2D
update_status	beams.py	/^    def update_status(self):$/;"	m	class:Beam
work	test/test_mpi.py	/^work = np.zeros(work_size)$/;"	v
work_local	test/test_mpi.py	/^work_local = np.arange(start,start+local_size,dtype=np.float64)$/;"	v
work_size	test/test_mpi.py	/^work_size = 10$/;"	v
write_statistics	CSR.py	/^    def write_statistics(self):$/;"	m	class:CSR2D
write_wakes	CSR.py	/^    def write_wakes(self):$/;"	m	class:CSR2D
x	beams.py	/^    def x(self):$/;"	m	class:Beam
x	test/test_interpolation.py	/^x = np.linspace(1, 4, 200)$/;"	v
x_transform	beams.py	/^    def x_transform(self):$/;"	m	class:Beam
xval	test/test_interpolation.py	/^xval = np.linspace(1, 4,m)$/;"	v
y	test/test_interpolation.py	/^y = np.linspace(4, 7, 200)$/;"	v
yaml	yaml_parser.py	/^import yaml$/;"	i
yval	test/test_interpolation.py	/^yval = np.linspace(4, 7, m)$/;"	v
z	beams.py	/^    def z(self):$/;"	m	class:Beam
z	test/test_interpolation.py	/^z = np.linspace(7, 9, 100)$/;"	v
zval	test/test_interpolation.py	/^zval = np.linspace(7, 9, m)$/;"	v
